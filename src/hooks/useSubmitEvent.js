import { useState } from 'react';

const useSubmitEvent = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(false);

    const endpoint = `${process.env.REACT_APP_HAMBAX_NEW_API_URL}/api/events`;

    const submitEvent = async (data, imageFile) => {
        setLoading(true);
        setError(null);
        setSuccess(false);

        const token = localStorage.getItem('authToken');

        if (!token) {
            setError('User is not authenticated. JWT token is missing.');
            setLoading(false);
            return;
        }

        try {
            const formData = new FormData();

            // üîπ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            Object.keys(data).forEach((key) => {
                if (typeof data[key] === 'object' && data[key] !== null) {
                    formData.append(key, JSON.stringify(data[key])); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ JSON
                } else {
                    formData.append(key, data[key]);
                }
            });

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (imageFile) {
                formData.append('eventImage', imageFile);
            }

            console.log('üì§ FormData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:');
            for (let pair of formData.entries()) {
                console.log(pair[0], pair[1]); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º –∏ —Ç–µ–∫—Å—Ç, –∏ —Ñ–∞–π–ª
            }

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { Authorization: `Bearer ${token}` },
                body: formData, // –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º Content-Type, –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –¥–æ–±–∞–≤–∏—Ç boundary
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'An error occurred');
            }

            setSuccess(true);
            return await response.json();
        } catch (err) {
            setError(err.message || 'Something went wrong');
        } finally {
            setLoading(false);
        }
    };

    return { submitEvent, loading, error, success };
};

export default useSubmitEvent;
