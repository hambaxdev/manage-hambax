import { useState } from 'react';

const useUpdateEvent = () => {
    const [updating, setUpdating] = useState(false);
    const [updateError, setUpdateError] = useState(null);

    const updateEvent = async (eventData, eventImageFile) => {
        setUpdating(true);
        setUpdateError(null);

        const token = localStorage.getItem('authToken');

        if (!token) {
            setUpdateError('User is not authenticated.');
            setUpdating(false);
            return false;
        }

        try {
            const formData = new FormData();

            // üîπ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            Object.keys(eventData).forEach((key) => {
                if (typeof eventData[key] === 'object' && eventData[key] !== null && key !== 'eventImage') {
                    formData.append(key, JSON.stringify(eventData[key])); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ JSON
                } else {
                    formData.append(key, eventData[key]);
                }
            });

            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (eventImageFile) {
                console.log("üì∏ Adding event image to FormData:", eventImageFile.name);
                formData.append('eventImage', eventImageFile);
            }

            console.log('üì§ FormData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:');
            for (let pair of formData.entries()) {
                console.log(pair[0], pair[1]); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º –∏ —Ç–µ–∫—Å—Ç, –∏ —Ñ–∞–π–ª
            }

            const response = await fetch(
                `${process.env.REACT_APP_HAMBAX_NEW_API_URL}/api/events/${eventData._id}`,
                {
                    method: 'PUT',
                    headers: {
                        Authorization: `Bearer ${token}`, // ‚ùå –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º `Content-Type`!
                    },
                    body: formData, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `FormData`
                }
            );

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error updating event');
            }

            return await response.json();
        } catch (err) {
            setUpdateError(err.message || 'Something went wrong.');
            return false;
        } finally {
            setUpdating(false);
        }
    };

    return { updateEvent, updating, updateError };
};

export default useUpdateEvent;
