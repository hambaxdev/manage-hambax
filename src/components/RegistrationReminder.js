import React, { useEffect } from "react";
import { Box, Typography, Button } from "@mui/material";
import useAuthContext from "../hooks/useAuth";
import { useNavigate } from "react-router-dom";
import { useTranslation } from "react-i18next";
import axios from "axios";

const RegistrationReminder = () => {
    const { t } = useTranslation();
    const { isBasicRegistrationComplete, profileData, updateAuthContext } = useAuthContext();
    const navigate = useNavigate();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ Stripe-–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const stripeOnboardingIncomplete =
        isBasicRegistrationComplete &&
        profileData &&
        !profileData.stripeOnboardingCompleted &&
        profileData.stripeOnboardingCompleted !== "" &&
        profileData.stripeOnboardingCompleted !== null;

    const stripeOnboardingLink = profileData?.stripeOnboardingLink;

    // üöÄ –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const fetchUserStatus = async () => {
            try {
                await axios.get(`${process.env.REACT_APP_API_URL}/auth/user-status`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem('authToken')}` },
                });
                updateAuthContext(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            }
        };

        if (!isBasicRegistrationComplete) {
            fetchUserStatus();
        }
    }, [isBasicRegistrationComplete, updateAuthContext]);

    // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ Stripe-–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if (!stripeOnboardingIncomplete && isBasicRegistrationComplete) {
        return null;
    }

    return (
        <Box
            sx={{
                color: "black",
                p: 2,
                textAlign: "center",
                borderRadius: "8px",
                backgroundColor: "#f5f5f5",
                mb: 2,
            }}
        >
            {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–∞–∑–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            {!isBasicRegistrationComplete && (
                <>
                    <Typography variant="body1" gutterBottom>
                        {t("registrationReminder.completeRegistration.message")}
                    </Typography>
                    <Button
                        variant="contained"
                        color="primary"
                        sx={{ mt: 1 }}
                        onClick={() => navigate("/complete-registration")}
                    >
                        {t("registrationReminder.completeRegistration.button")}
                    </Button>
                </>
            )}

            {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ Stripe –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞) */}
            {stripeOnboardingIncomplete && (
                <>
                    <Typography variant="body1" gutterBottom>
                        {t("registrationReminder.stripeOnboarding.message")}
                    </Typography>
                    <Button
                        variant="contained"
                        color="secondary"
                        sx={{ mt: 1 }}
                        onClick={() => (window.location.href = stripeOnboardingLink)}
                    >
                        {t("registrationReminder.stripeOnboarding.button")}
                    </Button>
                </>
            )}
        </Box>
    );
};

export default RegistrationReminder;
